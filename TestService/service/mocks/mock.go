// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	event "github.com/ustelemov/WBLVL0/TestService/event"
	schema "github.com/ustelemov/WBLVL0/TestService/schema"
)

// MockOrders is a mock of Orders interface.
type MockOrders struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersMockRecorder
}

// MockOrdersMockRecorder is the mock recorder for MockOrders.
type MockOrdersMockRecorder struct {
	mock *MockOrders
}

// NewMockOrders creates a new mock instance.
func NewMockOrders(ctrl *gomock.Controller) *MockOrders {
	mock := &MockOrders{ctrl: ctrl}
	mock.recorder = &MockOrdersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrders) EXPECT() *MockOrdersMockRecorder {
	return m.recorder
}

// GetAllUUIDsInCache mocks base method.
func (m *MockOrders) GetAllUUIDsInCache() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUUIDsInCache")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllUUIDsInCache indicates an expected call of GetAllUUIDsInCache.
func (mr *MockOrdersMockRecorder) GetAllUUIDsInCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUUIDsInCache", reflect.TypeOf((*MockOrders)(nil).GetAllUUIDsInCache))
}

// GetOrderByUUID mocks base method.
func (m *MockOrders) GetOrderByUUID(uuid string) *schema.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByUUID", uuid)
	ret0, _ := ret[0].(*schema.Order)
	return ret0
}

// GetOrderByUUID indicates an expected call of GetOrderByUUID.
func (mr *MockOrdersMockRecorder) GetOrderByUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByUUID", reflect.TypeOf((*MockOrders)(nil).GetOrderByUUID), uuid)
}

// GetOrderOutByUUID mocks base method.
func (m *MockOrders) GetOrderOutByUUID(arg0 string) *schema.OrderOut {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderOutByUUID", arg0)
	ret0, _ := ret[0].(*schema.OrderOut)
	return ret0
}

// GetOrderOutByUUID indicates an expected call of GetOrderOutByUUID.
func (mr *MockOrdersMockRecorder) GetOrderOutByUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderOutByUUID", reflect.TypeOf((*MockOrders)(nil).GetOrderOutByUUID), arg0)
}

// LoadAllOrdersInCache mocks base method.
func (m *MockOrders) LoadAllOrdersInCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAllOrdersInCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadAllOrdersInCache indicates an expected call of LoadAllOrdersInCache.
func (mr *MockOrdersMockRecorder) LoadAllOrdersInCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAllOrdersInCache", reflect.TypeOf((*MockOrders)(nil).LoadAllOrdersInCache))
}

// ProccessOrderMessage mocks base method.
func (m *MockOrders) ProccessOrderMessage(arg0 *event.OrderMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProccessOrderMessage", arg0)
}

// ProccessOrderMessage indicates an expected call of ProccessOrderMessage.
func (mr *MockOrdersMockRecorder) ProccessOrderMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProccessOrderMessage", reflect.TypeOf((*MockOrders)(nil).ProccessOrderMessage), arg0)
}

// SaveOrderInCache mocks base method.
func (m *MockOrders) SaveOrderInCache(arg0 *schema.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrderInCache", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrderInCache indicates an expected call of SaveOrderInCache.
func (mr *MockOrdersMockRecorder) SaveOrderInCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrderInCache", reflect.TypeOf((*MockOrders)(nil).SaveOrderInCache), arg0)
}

// SaveOrderInRepository mocks base method.
func (m *MockOrders) SaveOrderInRepository(arg0 *schema.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrderInRepository", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrderInRepository indicates an expected call of SaveOrderInRepository.
func (mr *MockOrdersMockRecorder) SaveOrderInRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrderInRepository", reflect.TypeOf((*MockOrders)(nil).SaveOrderInRepository), arg0)
}

// UpdateCacheOnTringer mocks base method.
func (m *MockOrders) UpdateCacheOnTringer(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCacheOnTringer", arg0)
}

// UpdateCacheOnTringer indicates an expected call of UpdateCacheOnTringer.
func (mr *MockOrdersMockRecorder) UpdateCacheOnTringer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCacheOnTringer", reflect.TypeOf((*MockOrders)(nil).UpdateCacheOnTringer), arg0)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetAllUUIDsInCache mocks base method.
func (m *MockService) GetAllUUIDsInCache() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUUIDsInCache")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllUUIDsInCache indicates an expected call of GetAllUUIDsInCache.
func (mr *MockServiceMockRecorder) GetAllUUIDsInCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUUIDsInCache", reflect.TypeOf((*MockService)(nil).GetAllUUIDsInCache))
}

// GetOrderByUUID mocks base method.
func (m *MockService) GetOrderByUUID(uuid string) *schema.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByUUID", uuid)
	ret0, _ := ret[0].(*schema.Order)
	return ret0
}

// GetOrderByUUID indicates an expected call of GetOrderByUUID.
func (mr *MockServiceMockRecorder) GetOrderByUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByUUID", reflect.TypeOf((*MockService)(nil).GetOrderByUUID), uuid)
}

// GetOrderOutByUUID mocks base method.
func (m *MockService) GetOrderOutByUUID(arg0 string) *schema.OrderOut {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderOutByUUID", arg0)
	ret0, _ := ret[0].(*schema.OrderOut)
	return ret0
}

// GetOrderOutByUUID indicates an expected call of GetOrderOutByUUID.
func (mr *MockServiceMockRecorder) GetOrderOutByUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderOutByUUID", reflect.TypeOf((*MockService)(nil).GetOrderOutByUUID), arg0)
}

// LoadAllOrdersInCache mocks base method.
func (m *MockService) LoadAllOrdersInCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAllOrdersInCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadAllOrdersInCache indicates an expected call of LoadAllOrdersInCache.
func (mr *MockServiceMockRecorder) LoadAllOrdersInCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAllOrdersInCache", reflect.TypeOf((*MockService)(nil).LoadAllOrdersInCache))
}

// ProccessOrderMessage mocks base method.
func (m *MockService) ProccessOrderMessage(arg0 *event.OrderMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProccessOrderMessage", arg0)
}

// ProccessOrderMessage indicates an expected call of ProccessOrderMessage.
func (mr *MockServiceMockRecorder) ProccessOrderMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProccessOrderMessage", reflect.TypeOf((*MockService)(nil).ProccessOrderMessage), arg0)
}

// SaveOrderInCache mocks base method.
func (m *MockService) SaveOrderInCache(arg0 *schema.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrderInCache", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrderInCache indicates an expected call of SaveOrderInCache.
func (mr *MockServiceMockRecorder) SaveOrderInCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrderInCache", reflect.TypeOf((*MockService)(nil).SaveOrderInCache), arg0)
}

// SaveOrderInRepository mocks base method.
func (m *MockService) SaveOrderInRepository(arg0 *schema.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrderInRepository", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrderInRepository indicates an expected call of SaveOrderInRepository.
func (mr *MockServiceMockRecorder) SaveOrderInRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrderInRepository", reflect.TypeOf((*MockService)(nil).SaveOrderInRepository), arg0)
}

// UpdateCacheOnTringer mocks base method.
func (m *MockService) UpdateCacheOnTringer(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCacheOnTringer", arg0)
}

// UpdateCacheOnTringer indicates an expected call of UpdateCacheOnTringer.
func (mr *MockServiceMockRecorder) UpdateCacheOnTringer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCacheOnTringer", reflect.TypeOf((*MockService)(nil).UpdateCacheOnTringer), arg0)
}
